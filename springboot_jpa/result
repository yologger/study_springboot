diff --git a/springboot_jpa/.gitignore b/springboot_jpa/.gitignore
new file mode 100644
index 0000000..5a979af
--- /dev/null
+++ b/springboot_jpa/.gitignore
@@ -0,0 +1,40 @@
+HELP.md
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Kotlin ###
+.kotlin
diff --git a/springboot_jpa/build.gradle.kts b/springboot_jpa/build.gradle.kts
new file mode 100644
index 0000000..5a0035d
--- /dev/null
+++ b/springboot_jpa/build.gradle.kts
@@ -0,0 +1,64 @@
+plugins {
+    kotlin("jvm") version "1.9.25"
+    kotlin("plugin.spring") version "1.9.25"
+    kotlin("plugin.jpa") version "1.9.25"
+    id("org.springframework.boot") version "3.2.10"
+    id("io.spring.dependency-management") version "1.1.6"
+}
+
+group = "com.yologger.study"
+version = "0.0.1-SNAPSHOT"
+
+java {
+    toolchain {
+        languageVersion = JavaLanguageVersion.of(17)
+    }
+}
+
+configurations {
+    compileOnly {
+        extendsFrom(configurations.annotationProcessor.get())
+    }
+}
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    // Kotlin
+    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
+    implementation("org.jetbrains.kotlin:kotlin-reflect")
+
+    // Spring Boot
+    developmentOnly("org.springframework.boot:spring-boot-devtools")
+    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
+    implementation("org.springframework.boot:spring-boot-starter-web")
+    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
+
+    // Database
+    // runtimeOnly("com.mysql:mysql-connector-j")
+    testRuntimeOnly("com.h2database:h2:1.4.200")
+
+
+    // Test
+    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
+    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
+    testImplementation("org.springframework.boot:spring-boot-starter-test")
+}
+
+kotlin {
+    compilerOptions {
+        freeCompilerArgs.addAll("-Xjsr305=strict")
+    }
+}
+
+tasks.withType<Test> {
+    useJUnitPlatform()
+}
+
+allOpen {
+    annotation("jakarta.persistence.Entity")
+    annotation("jakarta.persistence.MappedSuperclass")
+    annotation("jakarta.persistence.Embeddable")
+}
\ No newline at end of file
diff --git a/springboot_jpa/gradle/wrapper/gradle-wrapper.jar b/springboot_jpa/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..a4b76b9
Binary files /dev/null and b/springboot_jpa/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/springboot_jpa/gradle/wrapper/gradle-wrapper.properties b/springboot_jpa/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..df97d72
--- /dev/null
+++ b/springboot_jpa/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,7 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
+networkTimeout=10000
+validateDistributionUrl=true
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/springboot_jpa/gradlew b/springboot_jpa/gradlew
new file mode 100755
index 0000000..f5feea6
--- /dev/null
+++ b/springboot_jpa/gradlew
@@ -0,0 +1,252 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# SPDX-License-Identifier: Apache-2.0
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
+' "$PWD" ) || exit
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    if ! command -v java >/dev/null 2>&1
+    then
+        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
diff --git a/springboot_jpa/gradlew.bat b/springboot_jpa/gradlew.bat
new file mode 100644
index 0000000..9b42019
--- /dev/null
+++ b/springboot_jpa/gradlew.bat
@@ -0,0 +1,94 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+@rem SPDX-License-Identifier: Apache-2.0
+@rem
+
+@if "%DEBUG%"=="" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%"=="" set DIRNAME=.
+@rem This is normally unused
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if %ERRORLEVEL% equ 0 goto execute
+
+echo. 1>&2
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo. 1>&2
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if %ERRORLEVEL% equ 0 goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/springboot_jpa/settings.gradle.kts b/springboot_jpa/settings.gradle.kts
new file mode 100644
index 0000000..faecb95
--- /dev/null
+++ b/springboot_jpa/settings.gradle.kts
@@ -0,0 +1 @@
+rootProject.name = "springboot_jpa"
diff --git a/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/App.kt b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/App.kt
new file mode 100644
index 0000000..92a200a
--- /dev/null
+++ b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/App.kt
@@ -0,0 +1,11 @@
+package com.yologger.study.springboot_jpa
+
+import org.springframework.boot.autoconfigure.SpringBootApplication
+import org.springframework.boot.runApplication
+
+@SpringBootApplication
+class App
+
+fun main(args: Array<String>) {
+    runApplication<App>(*args)
+}
diff --git a/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/controller/TestController.kt b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/controller/TestController.kt
new file mode 100644
index 0000000..1dcd793
--- /dev/null
+++ b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/controller/TestController.kt
@@ -0,0 +1,15 @@
+package com.yologger.study.springboot_jpa.controller
+
+import org.springframework.web.bind.annotation.GetMapping
+import org.springframework.web.bind.annotation.RequestMapping
+import org.springframework.web.bind.annotation.RestController
+
+@RestController
+// @RequestMapping("/test")
+class TestController {
+
+    @GetMapping("/test")
+    fun test(): String {
+        return "test"
+    }
+}
\ No newline at end of file
diff --git a/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/entity/Board.kt b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/entity/Board.kt
new file mode 100644
index 0000000..e6d3de6
--- /dev/null
+++ b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/entity/Board.kt
@@ -0,0 +1,22 @@
+package com.yologger.study.springboot_jpa.entity
+
+import jakarta.persistence.*
+
+@Entity
+@Table(name= "board")
+data class Board (
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "id")
+    var id: Long = 0,
+
+    @Column(name = "title")
+    var title: String = "",
+
+    @Column(name = "body")
+    var body: String = "",
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "uid")
+    var user: User?
+)
\ No newline at end of file
diff --git a/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/entity/User.kt b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/entity/User.kt
new file mode 100644
index 0000000..633d09d
--- /dev/null
+++ b/springboot_jpa/src/main/kotlin/com/yologger/study/springboot_jpa/entity/User.kt
@@ -0,0 +1,24 @@
+package com.yologger.study.springboot_jpa.entity
+
+import jakarta.persistence.*
+
+@Entity
+@Table(name= "user")
+data class User (
+    @Id
+    @Column(name = "id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    var id: Long = 0,
+
+    @Column(name = "name")
+    var name: String = "",
+
+    @Column(name = "nation")
+    var nation: String = "",
+
+    @Column(name = "age")
+    var age: Long = 0,
+
+    @OneToMany(mappedBy = "user")
+    var boards: MutableList<Board> = mutableListOf(),
+)
\ No newline at end of file
diff --git a/springboot_jpa/src/main/resources/application.yaml b/springboot_jpa/src/main/resources/application.yaml
new file mode 100644
index 0000000..322461d
--- /dev/null
+++ b/springboot_jpa/src/main/resources/application.yaml
@@ -0,0 +1,23 @@
+server:
+  port: 6007
+
+spring:
+  application:
+    name: springboot_jpa
+  datasource:
+    driver-class-name: com.mysql.cj.jdbc.Driver
+    url: jdbc:mysql://localhost:3306/study?rewriteBatchedStatements=true
+    username: study
+    password: Study1234!@
+  jpa:
+    hibernate:
+      ddl-auto: create-drop
+    properties:
+      hibernate:
+        # show_sql: true
+        format_sql: true
+
+logging:
+  level:
+    org.hibernate.SQL: debug
+    # org.hibernate.orm.jdbc.bind: trace
\ No newline at end of file
diff --git a/springboot_jpa/src/test/kotlin/com/yologger/study/springboot_jpa/AppTests.kt b/springboot_jpa/src/test/kotlin/com/yologger/study/springboot_jpa/AppTests.kt
new file mode 100644
index 0000000..686ab1f
--- /dev/null
+++ b/springboot_jpa/src/test/kotlin/com/yologger/study/springboot_jpa/AppTests.kt
@@ -0,0 +1,13 @@
+package com.yologger.study.springboot_jpa
+
+import org.junit.jupiter.api.Test
+import org.springframework.boot.test.context.SpringBootTest
+
+@SpringBootTest
+class SpringbootJpaApplicationTests {
+
+    @Test
+    fun contextLoads() {
+    }
+
+}
diff --git a/springboot_jpa/src/test/resources/application.yaml b/springboot_jpa/src/test/resources/application.yaml
new file mode 100644
index 0000000..0e48386
--- /dev/null
+++ b/springboot_jpa/src/test/resources/application.yaml
@@ -0,0 +1,30 @@
+server:
+  port: 6007
+
+spring:
+  application:
+    name: springboot_jpa
+  jpa:
+    hibernate:
+      ddl-auto: create-drop
+    properties:
+      hibernate:
+        # show_sql: true
+        # format_sql: true
+        jdbc:
+          batch_size: 20
+          order_inserts: true
+          order_updates: true
+  datasource:
+#    driver-class-name: com.mysql.cj.jdbc.Driver
+#    url: jdbc:mysql://localhost:3306/study?rewriteBatchedStatements=true&useSSL=false&characterEncoding=UTF-8&profileSQL=true&logger=Slf4JLogger&maxQuerySizeToLog=1000000
+#    username: study
+#    password: Study1234!@
+    driver-class-name: org.h2.Driver
+    url: jdbc:h2:tcp://localhost/~/test
+    username: sa
+
+#logging:
+#  level:
+#    org.hibernate.SQL: debug
+#    org.hibernate.orm.jdbc.bind: trace # show binding parameter
\ No newline at end of file
diff --git a/springboot_querydsl/build.gradle.kts b/springboot_querydsl/build.gradle.kts
index 60a2de1..3e6c453 100644
--- a/springboot_querydsl/build.gradle.kts
+++ b/springboot_querydsl/build.gradle.kts
@@ -15,6 +15,12 @@ plugins {
 group = "com.yologger.study"
 version = "0.0.1-SNAPSHOT"
 
+allOpen {
+    annotation("jakarta.persistence.Entity")
+    annotation("jakarta.persistence.MappedSuperclass")
+    annotation("jakarta.persistence.Embeddable")
+}
+
 java {
     toolchain {
         languageVersion = JavaLanguageVersion.of(17)
@@ -43,8 +49,9 @@ dependencies {
     implementation("org.springframework.boot:spring-boot-starter-web")
     implementation("org.springframework.boot:spring-boot-starter-data-jpa")
 
-    // H2
-    runtimeOnly("com.h2database:h2")
+    // Database
+    // runtimeOnly("com.h2database:h2")
+    runtimeOnly("com.mysql:mysql-connector-j")
 
     // Query DSL
     implementation("com.querydsl:querydsl-jpa:${DependencyVersions.QUERY_DSL_VERSION}:jakarta")
diff --git a/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Board.kt b/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Board.kt
index 7054267..91ad9b9 100644
--- a/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Board.kt
+++ b/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Board.kt
@@ -3,10 +3,10 @@ package com.yologger.study.springboot_querydsl.entity
 import jakarta.persistence.*
 
 @Entity
-@Table(name= "`board`")
-class Board (
+@Table(name= "board")
+data class Board (
     @Id
-    @GeneratedValue
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     @Column(name = "id")
     val id: Long = 0,
 
@@ -19,5 +19,4 @@ class Board (
     @ManyToOne(fetch = FetchType.LAZY)
     @JoinColumn(name = "uid")
     var user: User
-) {
-}
\ No newline at end of file
+)
\ No newline at end of file
diff --git a/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Product.kt b/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Product.kt
deleted file mode 100644
index a95c3a0..0000000
--- a/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/Product.kt
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.yologger.study.springboot_querydsl.entity
-
-import jakarta.persistence.*
-
-@Entity
-@Table(name= "`product`")
-class Product (
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column
-    val id: Long = 0,
-
-    @Column(name = "name")
-    var name: String,
-
-    @Column(name = "description")
-    var description: String,
-) {
-}
\ No newline at end of file
diff --git a/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/User.kt b/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/User.kt
index d241524..a43d5c5 100644
--- a/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/User.kt
+++ b/springboot_querydsl/src/main/kotlin/com/yologger/study/springboot_querydsl/entity/User.kt
@@ -3,16 +3,22 @@ package com.yologger.study.springboot_querydsl.entity
 import jakarta.persistence.*
 
 @Entity
-@Table(name= "`user`")
-class User (
+@Table(name= "user")
+data class User (
     @Id
     @Column(name = "id")
-    @GeneratedValue
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     val id: Long = 0,
 
     @Column(name = "name")
     var name: String,
-) {
+
+    @Column(name = "nation")
+    val nation: String,
+
+    @Column(name = "age")
+    var age: Long,
+
     @OneToMany(mappedBy = "user")
-    lateinit var boards: List<Board>
-}
\ No newline at end of file
+    var boards: MutableList<Board> = mutableListOf(),
+)
\ No newline at end of file
diff --git a/springboot_querydsl/src/main/resources/application.yaml b/springboot_querydsl/src/main/resources/application.yaml
index 858e084..39ab8cf 100644
--- a/springboot_querydsl/src/main/resources/application.yaml
+++ b/springboot_querydsl/src/main/resources/application.yaml
@@ -1,20 +1,27 @@
 server:
-  port: 6006
+  port: 6007
 
 spring:
+  profiles:
+    active: local
   application:
-    name: springboot_querydsl
+    name: springboot_jpa
+  datasource:
+    driver-class-name: com.mysql.cj.jdbc.Driver
+    url: jdbc:mysql://localhost:3306/study
+    username: study
+    password: Study1234!@
   jpa:
     hibernate:
-      ddl-auto: update
+      # ddl-auto: create-drop
+      # ddl-auto: create
+      ddl-auto: none
     properties:
       hibernate:
         # show_sql: true
         format_sql: true
-  datasource:
-    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
 
 logging:
   level:
     org.hibernate.SQL: debug
-    org.hibernate.orm.jdbc.bind: trace
\ No newline at end of file
+    # org.hibernate.orm.jdbc.bind: trace
\ No newline at end of file
diff --git a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/SpringbootQuerydslApplicationTests.kt b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/AppTests.kt
similarity index 82%
rename from springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/SpringbootQuerydslApplicationTests.kt
rename to springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/AppTests.kt
index 89ceeb5..5dba49e 100644
--- a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/SpringbootQuerydslApplicationTests.kt
+++ b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/AppTests.kt
@@ -4,7 +4,7 @@ import org.junit.jupiter.api.Test
 import org.springframework.boot.test.context.SpringBootTest
 
 @SpringBootTest
-class SpringbootQuerydslApplicationTests {
+class AppTests {
 
     @Test
     fun contextLoads() {
diff --git a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/BoardTest.kt b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/BoardTest.kt
index 5e43f7c..c479d9a 100644
--- a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/BoardTest.kt
+++ b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/BoardTest.kt
@@ -1,51 +1,395 @@
 package com.yologger.study.springboot_querydsl.entity
 
+import com.querydsl.core.BooleanBuilder
+import com.querydsl.core.Tuple
+import com.querydsl.core.types.ExpressionUtils
+import com.querydsl.core.types.Predicate
+import com.querydsl.core.types.Projections
+import com.querydsl.core.types.dsl.BooleanExpression
+import com.querydsl.core.types.dsl.CaseBuilder
+import com.querydsl.core.types.dsl.Expressions
+import com.querydsl.jpa.JPAExpressions
+import com.querydsl.jpa.JPAExpressions.select
+import com.querydsl.jpa.impl.JPAQueryFactory
+import com.yologger.study.springboot_querydsl.dto.MemberDto
+import com.yologger.study.springboot_querydsl.dto.QUserDto
+import com.yologger.study.springboot_querydsl.dto.UserDto
+import com.yologger.study.springboot_querydsl.entity.QBoard.board
+import com.yologger.study.springboot_querydsl.entity.QUser.user
 import jakarta.persistence.EntityManager
+import jakarta.persistence.EntityManagerFactory
+import jakarta.persistence.PersistenceUnit
 import org.assertj.core.api.Assertions.assertThat
+import org.junit.jupiter.api.BeforeEach
 import org.junit.jupiter.api.Test
 import org.springframework.beans.factory.annotation.Autowired
 import org.springframework.boot.test.context.SpringBootTest
+import org.springframework.expression.spel.ast.Projection
 import org.springframework.transaction.annotation.Transactional
 
 @SpringBootTest
 @Transactional
 class BoardTest(
-    @Autowired private val entityManager: EntityManager
+    @Autowired private val entityManager: EntityManager,
+    @Autowired private val entityManagerFactory: EntityManagerFactory
 ) {
-
-    @Test
-    fun `domain model 테스트`() {
-        val user1 = User(name = "ronaldo")
-        val user2 = User(name = "messi")
-        val user3 = User(name = "neymar")
+    @BeforeEach
+    fun beforeEach() {
+        val user1 = User(name = "ronaldo", age = 40, nation = "portugal")
         entityManager.persist(user1)
+
+        val board1 = Board(title = "title1", body = "body1", user = user1)
+        val board2 = Board(title = "title2", body = "body2", user = user1)
+        val board3 = Board(title = "title3", body = "body3", user = user1)
+        val board4 = Board(title = "title4", body = "body4", user = user1)
+        entityManager.persist(board1)
+        entityManager.persist(board2)
+        entityManager.persist(board3)
+        entityManager.persist(board4)
+
+        val user2 = User(name = "messi", age = 38, nation = "argentina")
         entityManager.persist(user2)
+
+        val board5 = Board(title = "title5", body = "body5", user = user2)
+        val board6 = Board(title = "title6", body = "body6", user = user2)
+        val board7 = Board(title = "title7", body = "body7", user = user2)
+        val board8 = Board(title = "title8", body = "body8", user = user2)
+        entityManager.persist(board5)
+        entityManager.persist(board6)
+        entityManager.persist(board7)
+        entityManager.persist(board8)
+
+        val user3 = User(name = "benzema", age = 40, nation = "france")
+        val user4 = User(name = "kane", age = 31, nation = "england")
+        val user5 = User(name = "neymar", age = 32, nation = "brazil")
+        val user6 = User(name = "son", age = 32, nation = "south korea")
+        val user7 = User(name = "zlatan", age = 32, nation = "sweden")
+
         entityManager.persist(user3)
+        entityManager.persist(user4)
+        entityManager.persist(user5)
+        entityManager.persist(user6)
+        entityManager.persist(user7)
+    }
 
-        val boardA = Board(title = "board A", body = "body A", user = user1)
-        val boardB = Board(title = "board B", body = "body B", user = user1)
-        val boardC = Board(title = "board C", body = "body C", user = user2)
-        val boardD = Board(title = "board D", body = "body D", user = user2)
-        val boardE = Board(title = "board E", body = "body E", user = user2)
-        entityManager.persist(boardA)
-        entityManager.persist(boardB)
-        entityManager.persist(boardC)
-        entityManager.persist(boardD)
-        entityManager.persist(boardE)
-
-        entityManager.flush()   // DB에 저장
-        entityManager.clear()   // 영속성 컨텍스트 초기화
-
-        val resultUser1 = entityManager.createQuery("SELECT u FROM User u WHERE u.id = :id", User::class.java)
-            .setParameter("id", 1)
+    @Test
+    fun testJPQL() {
+        val result = entityManager.createQuery("SELECT b FROM Board b WHERE b.title = :title", Board::class.java)
+            .setParameter("title", "title1")
             .singleResult
-        assertThat(resultUser1.boards.size).isEqualTo(2)
 
+        assertThat(result.title).isEqualTo("title1")
+    }
+
+    @Test
+    fun testQueryDSL() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val boards = jpaQueryFactory
+            .selectFrom(board)
+            .orderBy(board.title.asc(), board.body.desc().nullsLast())
+            .fetch()
+
+        assertThat(boards.size).isNotZero()
+    }
+
+    @Test
+    fun testAggregation() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val tuple: Tuple? = jpaQueryFactory
+            .select(
+                user.count(),
+                user.age.sum(),
+                user.age.avg(),
+                user.age.max(),
+                user.age.min()
+            ).from(user)
+            .fetchOne()
+
+        assertThat(tuple?.get(user.count())).isEqualTo(2)
+        assertThat(tuple?.get(user.age.sum())).isEqualTo(78)
+    }
+
+    @Test
+    fun testGrouping() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val result: List<Tuple> = jpaQueryFactory
+            .select(
+                user.nation,
+                user.age.sum()
+            )
+            .from(user)
+            .groupBy(user.nation)
+            .having(user.age.sum().gt(50))
+            .fetch()
+
+        assertThat(result[0].get(user.nation)).isEqualTo("portugal")
+        assertThat(result[0].get(user.age.sum())).isEqualTo(76)
+    }
+
+    @Test
+    fun join() {
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val boards: List<Board> = jpaQueryFactory
+            .selectFrom(board)
+            .rightJoin(board.user, user)
+            .where(user.name.eq("ronaldo"))
+            .fetch()
+
+        assertThat(boards.size).isEqualTo(4)
+
+        assertThat(boards.size).isEqualTo(4)
+    }
+
+    @Test
+    fun thetaJoin() {
+        val kane = User(name = "Kane", age = 32, nation = "England")
+        entityManager.persist(kane)
+        val son = User(name = "Son", age = 33, nation = "South Korea")
+        entityManager.persist(son)
+
+        val board1 = Board(title = "Son", body = "body5", user = kane)
+        val board2 = Board(title = "Son", body = "body6", user = kane)
+        entityManager.persist(board1)
+        entityManager.persist(board2)
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+
+        val boards: List<Board> = jpaQueryFactory
+            .select(board)
+            .from(board, user)
+            .where(board.title.eq(user.name))
+            .fetch()
+
+        assertThat(boards.size).isEqualTo(2)
+    }
+
+    @Test
+    fun on() {
+        // 게시글과 유저을 조회하면서, 이름이 ronaldo인 유저만 조인, 게시글은 모두 조인
+        /*
+        * JPQL: SELECT b, u FROM Board b LEFT JOIN b.user u ON user.name = 'ronaldo'
+        * SQL: SELECT b.*, u.* FROM Board b LEFT JOIN User u ON b.uid = u.id AND u.name = 'ronaldo'
+        * */
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val tuples: List<Tuple> = jpaQueryFactory
+            .select(board,  user)
+            .from(board)
+            .leftJoin(board.user, user)
+            .on(user.name.eq("ronaldo"))
+            .fetch()
+
+        for (tuple in tuples) {
+            println(tuple)
+        }
+
+    }
+
+    @Test
+    fun test() {
+        // 연관관계가 없는 두 엔티티 외부   조인
+        // 게시글 제목이 유저 이름과 동일한 대상을 외부 조인
+        val kane = User(name = "Kane", age = 32, nation = "England")
+        entityManager.persist(kane)
+        val son = User(name = "Son", age = 33, nation = "South Korea")
+        entityManager.persist(son)
+
+        val board1 = Board(title = "Son", body = "body5", user = kane)
+        val board2 = Board(title = "Son", body = "body6", user = kane)
+        entityManager.persist(board1)
+        entityManager.persist(board2)
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+
+        val tuples: List<Tuple> = jpaQueryFactory
+            .select(board, user)
+            .from(board)
+            .leftJoin(user)
+            .on(board.title.eq(user.name))
+            .fetch()
+
+        for (tuple in tuples) {
+            println(tuple)
+        }
+    }
+
+
+
+    @Test
+    fun noFetchJoin() {
+        entityManager.flush()
+        entityManager.clear()
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val board = jpaQueryFactory
+            .selectFrom(board)
+            .where(board.title.eq("title1"))
+            .fetchOne()
+
+        // PersistContext에 연관관계에 있는 User가 로딩되었는지 확인
+        val isLoaded = entityManagerFactory.persistenceUnitUtil.isLoaded(board?.user)
+        assertThat(isLoaded).isFalse()  // false
+    }
+
+    @Test
+    fun fetchJoin() {
+        entityManager.flush()
+        entityManager.clear()
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val board = jpaQueryFactory
+            .selectFrom(board)
+            .join(board.user, user).fetchJoin()
+            .where(board.title.eq("title1"))
+            .fetchOne()
+
+        // PersistContext에 연관관계에 있는 User가 로딩되었는지 확인
+        val isLoaded = entityManagerFactory.persistenceUnitUtil.isLoaded(board?.user)
+        assertThat(isLoaded).isTrue()  // false
+    }
+
+    @Test
+    fun subquery() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+
+        val b1 = QBoard("b1")
+        val b2 = QBoard("b2")
+
+        val results: List<Board> = jpaQueryFactory
+            .selectFrom(b1)
+            .where(b1.title.eq(JPAExpressions
+                .select(b2.title)
+                .from(b2)
+                .where(b2.title.eq("title1"))))
+            .fetch()
+    }
+
+    @Test
+    fun subquery2() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+
+        val b1 = QBoard("b1")
+        val b2 = QBoard("b2")
+
+        val results: List<Board> = jpaQueryFactory
+            .selectFrom(b1)
+            .where(b1.title.eq(
+                select(b2.title)
+                .from(b2)
+                .where(b2.title.eq("title1"))))
+            .fetch()
+    }
+
+    @Test
+    fun case1() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val tuples: List<Tuple> = jpaQueryFactory
+            .select(
+                user.name,
+                CaseBuilder()
+                    .`when`(user.age.between(0, 20)).then("0~20")
+                    .`when`(user.age.between(10, 40)).then("20~40")
+                    .otherwise("40~")
+            )
+            .from(user)
+            .fetch()
+
+        for (tuple in tuples)
+            println(tuple)
+
+    }
+
+    @Test
+    fun constant() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val tuples: List<Tuple> = jpaQueryFactory
+            .select(
+                user.name,
+                user.age,
+                user.name.concat("_").concat(user.age.stringValue() )
+            )
+            .from(user)
+            .fetch()
+
+        for (tuple in tuples)
+            println(tuple)
+
+    }
+
+    @Test
+    fun projection1() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val users: List<User> = jpaQueryFactory
+            .select(user)
+            .from(user)
+            .fetch()
+
+        for (user in users)
+            println(user)
+
+    }
+
+    @Test
+    fun projectionDto() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val users: List<UserDto> = jpaQueryFactory
+            .select(QUserDto(user.name, user.age))
+            .from(user)
+            .fetch()
+
+        println(users)
+    }
+
+    @Test
+    fun sadasd() {
+        val name: String? = null
+        val age: Long? = 30
+
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+        val users = jpaQueryFactory
+            .selectFrom(user)
+            .where(*allEqual(name, age))
+            .fetch()
+    }
+
+    private fun nameEqual(nameCond: String?): BooleanExpression? {
+        return if (nameCond.isNullOrBlank()) null
+        else user.name.eq(nameCond)
+    }
+
+    private fun ageEqual(ageCond: Long?): BooleanExpression? {
+        return if (ageCond == null) null
+        else user.age.eq(ageCond)
+    }
+
+    private fun allEqual(nameCond: String?, ageCond: Long?): Array<BooleanExpression?> {
+        return arrayOf(nameEqual(nameCond), ageEqual(ageCond))
+    }
+
+    @Test
+    fun bulkUpdate() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+
+        val count = jpaQueryFactory
+            .update(user)
+            .set(user.age, user.age.add(1))
+            .execute()
+
+    }
+
+    @Test
+    fun sqlFunction() {
+        val jpaQueryFactory = JPAQueryFactory(entityManager)
+
+        jpaQueryFactory
+            .select(Expressions.numberTemplate(
+                Int::class.java,
+                "abs({0})",
+                user.age)
+            )
+            .from(user)
+            .fetch()
 
-        val resultUsers = entityManager.createQuery("SELECT u FROM User u", User::class.java).resultList
-        assertThat(resultUsers[0].boards.size).isEqualTo(2)
-        assertThat(resultUsers[1].boards.size).isEqualTo(3)
-        assertThat(resultUsers[2].boards.size).isEqualTo(0)
-        assertThat(resultUsers.size).isEqualTo(3)
     }
 }
\ No newline at end of file
diff --git a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/ProductTest.kt b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/ProductTest.kt
deleted file mode 100644
index 92dca15..0000000
--- a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/entity/ProductTest.kt
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.yologger.study.springboot_querydsl.entity
-
-import com.querydsl.jpa.impl.JPAQueryFactory
-import jakarta.persistence.EntityManager
-import org.assertj.core.api.Assertions
-import org.junit.jupiter.api.Test
-import org.springframework.beans.factory.annotation.Autowired
-import org.springframework.boot.test.context.SpringBootTest
-import org.springframework.transaction.annotation.Transactional
-
-
-@SpringBootTest
-@Transactional
-class ProductTest(
-    @Autowired private val entityManager: EntityManager
-) {
-
-    @Test
-    fun `QueryDSL QClass Configuration Test`() {
-        val product = Product(name = "product1", description = "description1")
-        entityManager.persist(product)
-
-        val query = JPAQueryFactory(entityManager)
-        val qProduct = QProduct("product")
-
-        val result =  query
-            .selectFrom(qProduct)
-            .fetchOne()
-
-        Assertions.assertThat(product.name).isEqualTo(result!!.name)
-        Assertions.assertThat(product.description).isEqualTo(result!!.description)
-    }
-}
\ No newline at end of file
diff --git a/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/repository/BoardJpaRepositoryTest.kt b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/repository/BoardJpaRepositoryTest.kt
new file mode 100644
index 0000000..034c7fd
--- /dev/null
+++ b/springboot_querydsl/src/test/kotlin/com/yologger/study/springboot_querydsl/repository/BoardJpaRepositoryTest.kt
@@ -0,0 +1,46 @@
+package com.yologger.study.springboot_querydsl.repository
+
+import com.yologger.study.springboot_querydsl.dto.BoardSearchCondition
+import com.yologger.study.springboot_querydsl.dto.BoardUserDto
+import com.yologger.study.springboot_querydsl.entity.Board
+import com.yologger.study.springboot_querydsl.entity.User
+import jakarta.persistence.EntityManager
+import org.junit.jupiter.api.BeforeEach
+import org.junit.jupiter.api.Test
+import org.springframework.beans.factory.annotation.Autowired
+import org.springframework.boot.test.context.SpringBootTest
+import org.springframework.transaction.annotation.Transactional
+
+@SpringBootTest
+@Transactional
+class BoardJpaRepositoryTest(
+    @Autowired private val entityManager: EntityManager,
+    @Autowired private val boardJpaRepository: BoardJpaRepository
+) {
+
+    @BeforeEach
+    fun beforeEach() {
+        val user = User(name = "ronaldo", age = 40, nation = "portugal")
+        entityManager.persist(user)
+
+        val board1 = Board(title = "title a", body = "body1", user = user)
+        val board2 = Board(title = "title a", body = "body2", user = user)
+        val board3 = Board(title = "title b", body = "body3", user = user)
+        val board4 = Board(title = "title c", body = "body4", user = user)
+        entityManager.persist(board1)
+        entityManager.persist(board2)
+        entityManager.persist(board3)
+        entityManager.persist(board4)
+    }
+
+    @Test
+    fun test() {
+        val results1: List<BoardUserDto>? = boardJpaRepository.search(BoardSearchCondition(username = "ronaldo"))
+        val results2: List<BoardUserDto>? = boardJpaRepository.search(BoardSearchCondition(username = "ronaldo", title = "title a"))
+        val results3: List<BoardUserDto>? = boardJpaRepository.search(BoardSearchCondition(username = "ronaldo", title = "title a", body = "body1"))
+
+        println(results1)
+        println(results2)
+        println(results3)
+    }
+}
\ No newline at end of file
